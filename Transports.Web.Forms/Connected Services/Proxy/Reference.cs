//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Transports.Web.Forms.Proxy {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Proxy.ITransportsService")]
    public interface ITransportsService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransportsService/CreateDriver")]
        void CreateDriver(string driver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransportsService/CreateDriver")]
        System.Threading.Tasks.Task CreateDriverAsync(string driver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransportsService/UpdateDriver")]
        void UpdateDriver(string updatedDriver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransportsService/UpdateDriver")]
        System.Threading.Tasks.Task UpdateDriverAsync(string updatedDriver);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransportsService/RemoveDriver")]
        void RemoveDriver(string driverId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransportsService/RemoveDriver")]
        System.Threading.Tasks.Task RemoveDriverAsync(string driverId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransportsService/CreateShift")]
        void CreateShift(string shift);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransportsService/CreateShift")]
        System.Threading.Tasks.Task CreateShiftAsync(string shift);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransportsService/UpdateShift")]
        void UpdateShift(string updatedShift);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransportsService/UpdateShift")]
        System.Threading.Tasks.Task UpdateShiftAsync(string updatedShift);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransportsService/RemoveShift")]
        void RemoveShift(string shiftId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransportsService/RemoveShift")]
        System.Threading.Tasks.Task RemoveShiftAsync(string shiftId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransportsService/CreateRoute")]
        void CreateRoute(string route);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransportsService/CreateRoute")]
        System.Threading.Tasks.Task CreateRouteAsync(string route);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransportsService/UpdateRoute")]
        void UpdateRoute(string updatedRoute);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransportsService/UpdateRoute")]
        System.Threading.Tasks.Task UpdateRouteAsync(string updatedRoute);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransportsService/RemoveRoute")]
        void RemoveRoute(string routeId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITransportsService/RemoveRoute")]
        System.Threading.Tasks.Task RemoveRouteAsync(string routeId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITransportsServiceChannel : Transports.Web.Forms.Proxy.ITransportsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransportsServiceClient : System.ServiceModel.ClientBase<Transports.Web.Forms.Proxy.ITransportsService>, Transports.Web.Forms.Proxy.ITransportsService {
        
        public TransportsServiceClient() {
        }
        
        public TransportsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TransportsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransportsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransportsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void CreateDriver(string driver) {
            base.Channel.CreateDriver(driver);
        }
        
        public System.Threading.Tasks.Task CreateDriverAsync(string driver) {
            return base.Channel.CreateDriverAsync(driver);
        }
        
        public void UpdateDriver(string updatedDriver) {
            base.Channel.UpdateDriver(updatedDriver);
        }
        
        public System.Threading.Tasks.Task UpdateDriverAsync(string updatedDriver) {
            return base.Channel.UpdateDriverAsync(updatedDriver);
        }
        
        public void RemoveDriver(string driverId) {
            base.Channel.RemoveDriver(driverId);
        }
        
        public System.Threading.Tasks.Task RemoveDriverAsync(string driverId) {
            return base.Channel.RemoveDriverAsync(driverId);
        }
        
        public void CreateShift(string shift) {
            base.Channel.CreateShift(shift);
        }
        
        public System.Threading.Tasks.Task CreateShiftAsync(string shift) {
            return base.Channel.CreateShiftAsync(shift);
        }
        
        public void UpdateShift(string updatedShift) {
            base.Channel.UpdateShift(updatedShift);
        }
        
        public System.Threading.Tasks.Task UpdateShiftAsync(string updatedShift) {
            return base.Channel.UpdateShiftAsync(updatedShift);
        }
        
        public void RemoveShift(string shiftId) {
            base.Channel.RemoveShift(shiftId);
        }
        
        public System.Threading.Tasks.Task RemoveShiftAsync(string shiftId) {
            return base.Channel.RemoveShiftAsync(shiftId);
        }
        
        public void CreateRoute(string route) {
            base.Channel.CreateRoute(route);
        }
        
        public System.Threading.Tasks.Task CreateRouteAsync(string route) {
            return base.Channel.CreateRouteAsync(route);
        }
        
        public void UpdateRoute(string updatedRoute) {
            base.Channel.UpdateRoute(updatedRoute);
        }
        
        public System.Threading.Tasks.Task UpdateRouteAsync(string updatedRoute) {
            return base.Channel.UpdateRouteAsync(updatedRoute);
        }
        
        public void RemoveRoute(string routeId) {
            base.Channel.RemoveRoute(routeId);
        }
        
        public System.Threading.Tasks.Task RemoveRouteAsync(string routeId) {
            return base.Channel.RemoveRouteAsync(routeId);
        }
    }
}
